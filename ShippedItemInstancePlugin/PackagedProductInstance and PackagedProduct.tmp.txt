
            //-----------------------
            //PackagedProductInstance
            //-----------------------
            // The PackagedProductInstance represents a single, unique product shipment line and maps 1:1 to the ShippedItemInstance
            // The shipment line is typically a single seed lot or crop protection batch
            // 
            //
            PackagedProductInstance packagedProductInstance = new PackagedProductInstance();
        

            //Description and quantity are set on the related class properties

            var quantity = (double)shippedItemInstance.Packaging.Quantity?.Content;

            packagedProductInstance.ProductQuantity = CreateRepresentationValue(quantity, shippedItemInstance.Quantity.UnitCode);

            // this is also in packaged product; why duplicated?
            //
            var perPackageWeight = (double)shippedItemInstance.Item.Packaging.PerPackageQuantity?.Content;
            var perPackageWeightUOM = shippedItemInstance.Item.Packaging.PerPackageQuantity?.UnitCode;
              
            // if this is placed in the tender box the packaging is outside of item

            if (shippedItemInstance.Packaging?.TypeCode == "SeedBox"
                && shippedItemInstance.Packaging.Quantity?.Content is not null
                && shippedItemInstance.Packaging.Quantity?.TypeCode == "GrossWeight") {
                
                var seedBoxUID = shippedItemInstance.Packaging?.Id;
                var tenderBoxGrossWeight  = shippedItemInstance.Packaging.Quantity?.Content;
                var tenderBoxWeightUOM = shippedItemInstance.Packaging.Quantity?.UnitCode;

                packagedProductInstance.GrossWeight = 
                    CreateRepresentationValue((double)tenderBoxGrossWeight,tenderBoxWeightUOM);
           
            } 
            else {
                
                // calculate total pounds as gross weight e.g., from example 55 LB/BG * 45 BG 
                var grossWeightCalculated = perPackageWeight * quantity;
                packagedProductInstance.GrossWeight = 
                    CreateRepresentationValue((double)grossWeightCalculated,shippedItemInstance.Packaging.Quantity.UnitCode);

            }
            
            packagedProductInstance.Description = shippedItemInstance.Item?.Description;
            

            //The remaining data is somewhat specific to the ShippedItemInstance and is persisted as ContextItems
            //The ContextItem data generally is intended to be passed out of the ApplicationDataModel and passed back in unaltered,  
            //in order that the data may return, e.g., on a logged planting operation and reconcile that planting operation 
            //back to this ShippedItemInstance.
         
            packagedProductInstance.ContextItems.AddRange(CreatePackagedProductInstanceContextItems(shippedItemInstance));

            //-----------------------
            // PackagedProduct
            //-----------------------
            // Packaged product is defined a referenced product within a specific packaging or container
            // 
            // Multiple ShippedItemInstances may map to the same PackagedProduct -- this is not true
            //
         
            PackagedProduct packagedProduct = GetPackagedProduct(shippedItemInstance);
            
            //
            if (packagedProduct != null)
            {
                packagedProductInstance.PackagedProductId = packagedProduct.Id.ReferenceId;
            }
            else
            {
                Errors.Add(new Error(null, "Mapper.MapShippedItemInstance", $"Couldn't create PackagedProduct for PackageProductInstance {packagedProductInstance.Id.ReferenceId}", null));
            }

            //Add the PackagedProductInstance to the Catalog.   The PackagedProduct is added in the subroutine above.
            Catalog.PackagedProductInstances.Add(packagedProductInstance);
        
        
