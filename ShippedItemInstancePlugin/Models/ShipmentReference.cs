/*
 * AgGateway In-Field Product Id
 *
 * Allows the Retailer to send information about the actual product shipped to the Farmer, including shipment identifer, product identifiers, seed lot id, mixture batch id, seed treatment and product composition.  Allows the Farmer (via a mobile application or FMIS), or the Farmer's equipment manufacturer application (aka OEM Platform, e.g., Deere Operations Center, AGCO Fuse, CNH AFS, etc.) to retrieve the Product shipped by a Retailer using GET /setupfiles.    V4.1 Allows shipments from the farm to the retailer/ elevator / processor as these roles are reversed as the shipFromParty is the farmer and shipToParty is the commodity processor or elevator for storage.  This improves the process for receipts at the elevator.  
 *
 * OpenAPI spec version: V4.1
 * Contact: wg01@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ShipmentReference : IEquatable<ShipmentReference>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>

        [DataMember(Name="typeCode")]
        public string TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>

        [DataMember(Name="note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public ShipmentReferenceStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets LineNumberId
        /// </summary>

        [DataMember(Name="lineNumberId")]
        public string LineNumberId { get; set; }

        /// <summary>
        /// Gets or Sets ShipUnitReference
        /// </summary>

        [DataMember(Name="shipUnitReference")]
        public ShipmentReferenceShipUnitReference ShipUnitReference { get; set; }

        /// <summary>
        /// Gets or Sets ActualPickupDateTime
        /// </summary>

        [DataMember(Name="actualPickupDateTime")]
        public DateTime? ActualPickupDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ActualShipDateTime
        /// </summary>

        [DataMember(Name="actualShipDateTime")]
        public DateTime? ActualShipDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ActualDeliveryDateTime
        /// </summary>

        [DataMember(Name="actualDeliveryDateTime")]
        public DateTime? ActualDeliveryDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredQuantity
        /// </summary>

        [DataMember(Name="deliveredQuantity")]
        public ShipmentReferenceDeliveredQuantity DeliveredQuantity { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedQuantity
        /// </summary>

        [DataMember(Name="acceptedQuantity")]
        public ShipmentReferenceDeliveredQuantity AcceptedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets RejectedQuantity
        /// </summary>

        [DataMember(Name="rejectedQuantity")]
        public ShipmentReferenceDeliveredQuantity RejectedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ReturnedQuantity
        /// </summary>

        [DataMember(Name="returnedQuantity")]
        public ShipmentReferenceDeliveredQuantity ReturnedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets ReturnMaterialAuthorizationId
        /// </summary>

        [DataMember(Name="returnMaterialAuthorizationId")]
        public string ReturnMaterialAuthorizationId { get; set; }

        /// <summary>
        /// Gets or Sets ShipFromParty
        /// </summary>

        [DataMember(Name="shipFromParty")]
        public ShipFromParty ShipFromParty { get; set; }

        /// <summary>
        /// Gets or Sets ShipToParty
        /// </summary>

        [DataMember(Name="shipToParty")]
        public ShipToParty ShipToParty { get; set; }

        /// <summary>
        /// Gets or Sets CarrierParty
        /// </summary>

        [DataMember(Name="carrierParty")]
        public CarrierParty CarrierParty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentReference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LineNumberId: ").Append(LineNumberId).Append("\n");
            sb.Append("  ShipUnitReference: ").Append(ShipUnitReference).Append("\n");
            sb.Append("  ActualPickupDateTime: ").Append(ActualPickupDateTime).Append("\n");
            sb.Append("  ActualShipDateTime: ").Append(ActualShipDateTime).Append("\n");
            sb.Append("  ActualDeliveryDateTime: ").Append(ActualDeliveryDateTime).Append("\n");
            sb.Append("  DeliveredQuantity: ").Append(DeliveredQuantity).Append("\n");
            sb.Append("  AcceptedQuantity: ").Append(AcceptedQuantity).Append("\n");
            sb.Append("  RejectedQuantity: ").Append(RejectedQuantity).Append("\n");
            sb.Append("  ReturnedQuantity: ").Append(ReturnedQuantity).Append("\n");
            sb.Append("  ReturnMaterialAuthorizationId: ").Append(ReturnMaterialAuthorizationId).Append("\n");
            sb.Append("  ShipFromParty: ").Append(ShipFromParty).Append("\n");
            sb.Append("  ShipToParty: ").Append(ShipToParty).Append("\n");
            sb.Append("  CarrierParty: ").Append(CarrierParty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShipmentReference)obj);
        }

        /// <summary>
        /// Returns true if ShipmentReference instances are equal
        /// </summary>
        /// <param name="other">Instance of ShipmentReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentReference other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TypeCode == other.TypeCode ||
                    TypeCode != null &&
                    TypeCode.Equals(other.TypeCode)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    LineNumberId == other.LineNumberId ||
                    LineNumberId != null &&
                    LineNumberId.Equals(other.LineNumberId)
                ) && 
                (
                    ShipUnitReference == other.ShipUnitReference ||
                    ShipUnitReference != null &&
                    ShipUnitReference.Equals(other.ShipUnitReference)
                ) && 
                (
                    ActualPickupDateTime == other.ActualPickupDateTime ||
                    ActualPickupDateTime != null &&
                    ActualPickupDateTime.Equals(other.ActualPickupDateTime)
                ) && 
                (
                    ActualShipDateTime == other.ActualShipDateTime ||
                    ActualShipDateTime != null &&
                    ActualShipDateTime.Equals(other.ActualShipDateTime)
                ) && 
                (
                    ActualDeliveryDateTime == other.ActualDeliveryDateTime ||
                    ActualDeliveryDateTime != null &&
                    ActualDeliveryDateTime.Equals(other.ActualDeliveryDateTime)
                ) && 
                (
                    DeliveredQuantity == other.DeliveredQuantity ||
                    DeliveredQuantity != null &&
                    DeliveredQuantity.Equals(other.DeliveredQuantity)
                ) && 
                (
                    AcceptedQuantity == other.AcceptedQuantity ||
                    AcceptedQuantity != null &&
                    AcceptedQuantity.Equals(other.AcceptedQuantity)
                ) && 
                (
                    RejectedQuantity == other.RejectedQuantity ||
                    RejectedQuantity != null &&
                    RejectedQuantity.Equals(other.RejectedQuantity)
                ) && 
                (
                    ReturnedQuantity == other.ReturnedQuantity ||
                    ReturnedQuantity != null &&
                    ReturnedQuantity.Equals(other.ReturnedQuantity)
                ) && 
                (
                    ReturnMaterialAuthorizationId == other.ReturnMaterialAuthorizationId ||
                    ReturnMaterialAuthorizationId != null &&
                    ReturnMaterialAuthorizationId.Equals(other.ReturnMaterialAuthorizationId)
                ) && 
                (
                    ShipFromParty == other.ShipFromParty ||
                    ShipFromParty != null &&
                    ShipFromParty.Equals(other.ShipFromParty)
                ) && 
                (
                    ShipToParty == other.ShipToParty ||
                    ShipToParty != null &&
                    ShipToParty.Equals(other.ShipToParty)
                ) && 
                (
                    CarrierParty == other.CarrierParty ||
                    CarrierParty != null &&
                    CarrierParty.Equals(other.CarrierParty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TypeCode != null)
                    hashCode = hashCode * 59 + TypeCode.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (LineNumberId != null)
                    hashCode = hashCode * 59 + LineNumberId.GetHashCode();
                    if (ShipUnitReference != null)
                    hashCode = hashCode * 59 + ShipUnitReference.GetHashCode();
                    if (ActualPickupDateTime != null)
                    hashCode = hashCode * 59 + ActualPickupDateTime.GetHashCode();
                    if (ActualShipDateTime != null)
                    hashCode = hashCode * 59 + ActualShipDateTime.GetHashCode();
                    if (ActualDeliveryDateTime != null)
                    hashCode = hashCode * 59 + ActualDeliveryDateTime.GetHashCode();
                    if (DeliveredQuantity != null)
                    hashCode = hashCode * 59 + DeliveredQuantity.GetHashCode();
                    if (AcceptedQuantity != null)
                    hashCode = hashCode * 59 + AcceptedQuantity.GetHashCode();
                    if (RejectedQuantity != null)
                    hashCode = hashCode * 59 + RejectedQuantity.GetHashCode();
                    if (ReturnedQuantity != null)
                    hashCode = hashCode * 59 + ReturnedQuantity.GetHashCode();
                    if (ReturnMaterialAuthorizationId != null)
                    hashCode = hashCode * 59 + ReturnMaterialAuthorizationId.GetHashCode();
                    if (ShipFromParty != null)
                    hashCode = hashCode * 59 + ShipFromParty.GetHashCode();
                    if (ShipToParty != null)
                    hashCode = hashCode * 59 + ShipToParty.GetHashCode();
                    if (CarrierParty != null)
                    hashCode = hashCode * 59 + CarrierParty.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShipmentReference left, ShipmentReference right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShipmentReference left, ShipmentReference right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
