/*
 * AgGateway In-Field Product Id
 *
 * Allows the Retailer to send information about the actual product shipped to the Farmer, including shipment identifer, product identifiers, seed lot id, mixture batch id, seed treatment and product composition.  Allows the Farmer (via a mobile application or FMIS), or the Farmer's equipment manufacturer application (aka OEM Platform, e.g., Deere Operations Center, AGCO Fuse, CNH AFS, etc.) to retrieve the Product shipped by a Retailer using GET /setupfiles.    V4.1 Allows shipments from the farm to the retailer/ elevator / processor as these roles are reversed as the shipFromParty is the farmer and shipToParty is the commodity processor or elevator for storage.  This improves the process for receipts at the elevator.  
 *
 * OpenAPI spec version: V4.1
 * Contact: wg01@aggateway.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Item : IEquatable<Item>
    { 
        /// <summary>
        /// Gets or Sets RelatedId
        /// </summary>

        [DataMember(Name="relatedId")]
        public RelatedIdList RelatedId { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerItemIdentification
        /// </summary>

        [DataMember(Name="manufacturerItemIdentification")]
        public ItemManufacturerItemIdentification ManufacturerItemIdentification { get; set; }

        /// <summary>
        /// Gets or Sets Upcid
        /// </summary>

        [DataMember(Name="upcid")]
        public string Upcid { get; set; }

        /// <summary>
        /// Gets or Sets Gtinid
        /// </summary>

        [DataMember(Name="gtinid")]
        public string Gtinid { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>

        [DataMember(Name="classification")]
        public Classification Classification { get; set; }

        /// <summary>
        /// Gets or Sets Substance
        /// </summary>

        [DataMember(Name="substance")]
        public List<ItemSubstance> Substance { get; set; }

        /// <summary>
        /// Gets or Sets Packaging
        /// </summary>

        [DataMember(Name="packaging")]
        public ItemPackaging Packaging { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturingParty
        /// </summary>

        [DataMember(Name="manufacturingParty")]
        public ItemManufacturingParty ManufacturingParty { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>

        [DataMember(Name="productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets BrandName
        /// </summary>

        [DataMember(Name="brandName")]
        public string BrandName { get; set; }

        /// <summary>
        /// Gets or Sets VarietyName
        /// </summary>

        [DataMember(Name="varietyName")]
        public string VarietyName { get; set; }

        /// <summary>
        /// Gets or Sets ItemTreatment
        /// </summary>

        [DataMember(Name="itemTreatment")]
        public ItemItemTreatment ItemTreatment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  RelatedId: ").Append(RelatedId).Append("\n");
            sb.Append("  ManufacturerItemIdentification: ").Append(ManufacturerItemIdentification).Append("\n");
            sb.Append("  Upcid: ").Append(Upcid).Append("\n");
            sb.Append("  Gtinid: ").Append(Gtinid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Substance: ").Append(Substance).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  ManufacturingParty: ").Append(ManufacturingParty).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  VarietyName: ").Append(VarietyName).Append("\n");
            sb.Append("  ItemTreatment: ").Append(ItemTreatment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Item)obj);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="other">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RelatedId == other.RelatedId ||
                    RelatedId != null &&
                    RelatedId.Equals(other.RelatedId)
                ) && 
                (
                    ManufacturerItemIdentification == other.ManufacturerItemIdentification ||
                    ManufacturerItemIdentification != null &&
                    ManufacturerItemIdentification.Equals(other.ManufacturerItemIdentification)
                ) && 
                (
                    Upcid == other.Upcid ||
                    Upcid != null &&
                    Upcid.Equals(other.Upcid)
                ) && 
                (
                    Gtinid == other.Gtinid ||
                    Gtinid != null &&
                    Gtinid.Equals(other.Gtinid)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Classification == other.Classification ||
                    Classification != null &&
                    Classification.Equals(other.Classification)
                ) && 
                (
                    Substance == other.Substance ||
                    Substance != null &&
                    Substance.SequenceEqual(other.Substance)
                ) && 
                (
                    Packaging == other.Packaging ||
                    Packaging != null &&
                    Packaging.Equals(other.Packaging)
                ) && 
                (
                    ManufacturingParty == other.ManufacturingParty ||
                    ManufacturingParty != null &&
                    ManufacturingParty.Equals(other.ManufacturingParty)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    VarietyName == other.VarietyName ||
                    VarietyName != null &&
                    VarietyName.Equals(other.VarietyName)
                ) && 
                (
                    ItemTreatment == other.ItemTreatment ||
                    ItemTreatment != null &&
                    ItemTreatment.Equals(other.ItemTreatment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RelatedId != null)
                    hashCode = hashCode * 59 + RelatedId.GetHashCode();
                    if (ManufacturerItemIdentification != null)
                    hashCode = hashCode * 59 + ManufacturerItemIdentification.GetHashCode();
                    if (Upcid != null)
                    hashCode = hashCode * 59 + Upcid.GetHashCode();
                    if (Gtinid != null)
                    hashCode = hashCode * 59 + Gtinid.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Classification != null)
                    hashCode = hashCode * 59 + Classification.GetHashCode();
                    if (Substance != null)
                    hashCode = hashCode * 59 + Substance.GetHashCode();
                    if (Packaging != null)
                    hashCode = hashCode * 59 + Packaging.GetHashCode();
                    if (ManufacturingParty != null)
                    hashCode = hashCode * 59 + ManufacturingParty.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (VarietyName != null)
                    hashCode = hashCode * 59 + VarietyName.GetHashCode();
                    if (ItemTreatment != null)
                    hashCode = hashCode * 59 + ItemTreatment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Item left, Item right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Item left, Item right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
